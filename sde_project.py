# -*- coding: utf-8 -*-
"""SDE_PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bYpKTtZO1YKyWTJ_rXmqN4JP_Z8DRKTd
"""

import pandas as pd
import numpy as np
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import numpy as np
import itertools

# Global
count = 10
length = 15
breadth = int(length*(3/5))

filepath = "/content/SDE - Sheet4.csv"
df = pd.read_csv(filepath)

column_1 = df.iloc[:,0]

new_array = []
categ = []
for i in range(len(column_1)):
  num = column_1[i][1:4]
  cat = column_1[i][6:]
  new_array.append(num)
  categ.append(cat)

print(categ)

for i in set(categ):
  print(i, categ.count(i))

new_df = pd.DataFrame({"Category": new_array, "Fix": df.iloc[:,1]})
new_df[:5]

# new_df.to_csv("arvind_sde.csv", index=False)

column_1 = new_df.iloc[:,0]
column_2 = new_df.iloc[:,1]

L = len(set(column_1))
column_1[:3]

letter = 'c'
overall_arr = []
for x in set(column_2):
  arr = [0]*L
  for i in range(len(column_2)):
    if(new_df.iloc[:,1][i] == x):
      index = int(new_df.iloc[:,0][i][-1])
      letter = new_df.iloc[:,0][i][-3]
      arr[index-1] += 1
  overall_arr.append([arr, x])

labels = list(set(column_2))
sum_array = []
for i in range(len(overall_arr)):
  sum_array.append([sum(overall_arr[i][0]), labels[i]])

sum_array

sum_array_new = sorted(sum_array)
final_array = [x[1] for x in sum_array_new[-count:]]

final_array

sum_array_new

overall_arr_new = []
labels_new = []
for x in final_array:
  for y in range(len(overall_arr)):
    if(overall_arr[y][1] == x):
      z = overall_arr[y]
      overall_arr_new.append(z[0])
      labels_new.append(z[1]+ " (" +str(sum(z[0])) + ")")


overall_arr_new

def plot_confusion_matrix(cm,x_axis_names, y_axis_names,title='Confusion matrix',cmap=None,normalize=True):

    accuracy = np.trace(cm) / float(np.sum(cm))
    misclass = 1 - accuracy

    if cmap is None:
        cmap = plt.get_cmap('Blues')

    plt.figure(figsize=(length, breadth))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()

    if x_axis_names is not None:
        tick_marks_x = np.arange(len(x_axis_names))
        plt.xticks(tick_marks_x, x_axis_names)
    if y_axis_names is not None:
        tick_marks_y = np.arange(len(y_axis_names))
        plt.yticks(tick_marks_y, y_axis_names)

    plt.tight_layout()
    plt.show()

x_axis = []
for i in range(L):
  temp_str = letter + "." + str(i+1)
  x_axis.append(temp_str)

plot_confusion_matrix(cm = np.array(overall_arr_new), normalize = False, x_axis_names = x_axis, y_axis_names = labels_new,title = "Model Conversion Distribution")